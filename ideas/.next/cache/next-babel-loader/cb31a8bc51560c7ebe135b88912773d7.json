{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props'; //import { GoogleLogin } from 'react-google-login';\n\nimport GitHubLogin from 'react-github-login';\nimport '.././css/signinform.css';\nimport axios from 'axios';\nimport { Form } from 'react-bootstrap';\nimport Router from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectLoginState } from './states/states';\nimport { setLogin, setLogout, setAccessToken, setEmail, setUsername } from './actions/articlesAction';\n\nconst SignUpForm = () => {\n  const disPatch = useDispatch();\n  const isLogin = useSelector(selectLoginState);\n  useEffect(() => {\n    if (isLogin) {\n      Router.push(`/`);\n    }\n  }, [isLogin]);\n  const {\n    0: value,\n    1: setValue\n  } = useState({\n    username: '',\n    email: '',\n    password: '',\n    messages: ''\n  });\n  const {\n    username,\n    email,\n    password,\n    messages\n  } = value;\n\n  const handleChange = name => e => {\n    setValue(_objectSpread(_objectSpread({}, value), {}, {\n      [name]: e.target.value.trim()\n    }));\n  };\n\n  const passAccessToken = async (provider, access_token) => {\n    const res = await axios.post('/api/social-auth', {\n      provider: provider,\n      access_token: access_token\n    });\n    return res;\n  };\n\n  const createUser = async (username, password) => {\n    const res = await axios.post('/api/users', {\n      username: username,\n      password: password\n    });\n    return res;\n  };\n\n  const responseFacebook = async response => {\n    try {\n      const responseFromDjango = await passAccessToken('facebook', response[\"accessToken\"]);\n      console.log(responseFromDjango);\n      const token = responseFromDjango[\"data\"][\"token\"];\n      const username = responseFromDjango[\"data\"][\"username\"];\n      const email = response[\"email\"];\n      SetLogin(token, email, username);\n    } catch (error) {\n      //res.data = error;\n      setValue(_objectSpread(_objectSpread({}, value), {}, {\n        ['messages']: error.message\n      }));\n      console.log(error);\n      disPatch(setLogout());\n    }\n  };\n\n  const responseGoogle = response => {\n    console.log(response);\n  };\n\n  const SetLogin = (token, email, username) => {\n    if (token !== null && token !== undefined && token.length > 0) {\n      disPatch(setLogin());\n      disPatch(setAccessToken(token)); //local storage\n\n      localStorage.setItem(\"login\", \"true\");\n      localStorage.setItem(\"token\", token);\n\n      if (email !== null && email !== undefined && email.length > 0) {\n        disPatch(setEmail(email)); //local storage\n\n        localStorage.setItem(\"email\", email);\n      }\n\n      if (username !== null && username !== undefined && username.length > 0) {\n        disPatch(setUsername(username)); //local storage\n\n        localStorage.setItem(\"username\", username);\n      }\n    }\n  };\n\n  const ResponseGithubOnSuccess = async response => {\n    try {\n      const responseFromGithub = await axios.post('/api/get-github-access-token', {\n        code: response['code']\n      });\n      console.log(responseFromGithub['data']);\n      const responseFromDjango = await passAccessToken('github', responseFromGithub['data']);\n      console.log(responseFromDjango);\n      const token = responseFromDjango[\"data\"][\"token\"];\n      const email = responseFromDjango[\"data\"][\"email\"];\n      const username = responseFromDjango[\"data\"][\"username\"];\n      SetLogin(token, email, username);\n    } catch (error) {\n      //res.data = error;\n      console.log(error);\n      setValue(_objectSpread(_objectSpread({}, value), {}, {\n        ['messages']: error.message\n      }));\n      disPatch(setLogout());\n    }\n  };\n\n  const ResponseGithubOnFailure = response => console.error(response);\n\n  const handleSubmit = async e => {\n    // Check if the form is invalid\n    // null or empty \n    // email format\n    e.preventDefault();\n\n    try {\n      const createUserRes = await axios.post('/api/users/', {\n        username: username,\n        password: password\n      });\n\n      if (createUserRes[\"data\"][\"error\"] !== undefined) {\n        var err = createUserRes[\"data\"][\"error\"];\n        setValue(_objectSpread(_objectSpread({}, value), {}, {\n          ['messages']: `${Object.keys(err)[0]} : ${Object.values(err)[0]}`\n        }));\n      } else {\n        const id = createUserRes[\"data\"][\"id\"];\n        const token = createUserRes[\"data\"][\"token\"];\n        const headers = {\n          Authorization: `JWT ${token}`\n        };\n        const updateProfileRes = await axios.post('/api/profile/', {\n          email: email,\n          reader: id\n        }, {\n          headers: headers\n        });\n        console.log(updateProfileRes);\n        var err = updateProfileRes[\"data\"][\"error\"];\n\n        if (err !== undefined) {\n          setValue(_objectSpread(_objectSpread({}, value), {}, {\n            ['messages']: `${Object.keys(err)[0]} : ${Object.values(err)[0]}`\n          }));\n        }\n\n        if (updateProfileRes !== undefined && updateProfileRes[\"data\"][\"email\"] === email) {\n          SetLogin(token, email, username);\n        }\n      }\n    } catch (error) {\n      //res.data = error;\n      setValue(_objectSpread(_objectSpread({}, value), {}, {\n        ['messages']: error.message\n      }));\n      console.log(error);\n    }\n  };\n\n  return __jsx(Fragment, null, __jsx(\"div\", {\n    className: \"signinform\"\n  }, __jsx(\"div\", {\n    className: \"grid-box\"\n  }, __jsx(\"div\", {\n    className: \"title\"\n  }, \"Create Your Free Account\"), __jsx(FacebookLogin, {\n    cssClass: \"fb-btn\",\n    appId: \"240314257268798\",\n    autoLoad: false,\n    fields: \"name,email,picture\",\n    callback: responseFacebook,\n    render: renderProps => __jsx(\"button\", {\n      onClick: renderProps.onClick,\n      className: \"fb-btn\"\n    }, \"Facebook\")\n  }), __jsx(GitHubLogin, {\n    className: \"github-btn\",\n    clientId: \"51b1a8ee5b7cad1e6a85\",\n    redirectUri: \"http://localhost:3000/signin\",\n    onSuccess: ResponseGithubOnSuccess,\n    onFailure: ResponseGithubOnFailure,\n    buttonText: \"Github\"\n  }), __jsx(\"div\", {\n    className: \"split-line\"\n  }, \"Or signup by email\"), __jsx(\"div\", {\n    className: \"signin-form\"\n  }, __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(Form.Group, {\n    controlId: \"formBasicEmail\"\n  }, __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter Username\",\n    className: \"username\",\n    onChange: handleChange('username')\n  })), __jsx(Form.Group, {\n    controlId: \"formBasicPassword\"\n  }, __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter Email\",\n    className: \"email\",\n    onChange: handleChange('email')\n  })), __jsx(Form.Group, {\n    controlId: \"formBasicPassword\"\n  }, __jsx(Form.Control, {\n    type: \"password\",\n    placeholder: \"Password\",\n    className: \"password\",\n    onChange: handleChange('password')\n  })), __jsx(\"button\", {\n    className: \"btn-submit\"\n  }, \"Get Started\"))))), __jsx(\"div\", {\n    className: \"messages\"\n  }, messages));\n};\n\nexport default SignUpForm;","map":null,"metadata":{},"sourceType":"module"}