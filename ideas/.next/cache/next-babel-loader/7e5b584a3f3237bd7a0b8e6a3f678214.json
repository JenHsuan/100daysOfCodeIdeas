{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Card } from 'react-bootstrap';\nimport ArticleModal from '../components/ArticleModal';\nimport '.././css/article.css';\nimport '.././css/card.css';\nimport { selectLoginState, selectBookmarksState, selectProviderState, selectUserIdState, selectEmailState, selectFinishedArticlessState } from './states/states';\nimport { setBookmarks, setFinishedArticles } from './actions/articlesAction';\nimport Router, { useRouter } from 'next/router';\nimport axios from 'axios';\n\nconst Article = ({\n  article\n}) => {\n  const router = useRouter();\n  const disPatch = useDispatch();\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n  const {\n    0: isBookmarked,\n    1: setBookmark\n  } = useState(false);\n  const {\n    0: isChecked,\n    1: setChecked\n  } = useState(false);\n  const isLogin = useSelector(selectLoginState);\n  const bookmarks = useSelector(selectBookmarksState);\n  const userId = useSelector(selectUserIdState);\n  const provider = useSelector(selectProviderState);\n  const email = useSelector(selectEmailState);\n  const finishedArticles = useSelector(selectFinishedArticlessState);\n  useEffect(() => {\n    if (bookmarks.find(bookmark => bookmark == article.id) !== undefined) {\n      console.log('bookmark');\n      setBookmark(true);\n    }\n  }, [bookmarks]);\n  useEffect(() => {\n    if (finishedArticles.find(finishedArticle => finishedArticle == article.id) !== undefined) {\n      console.log('finishedArticle');\n      setChecked(true);\n    }\n  }, [finishedArticles]);\n\n  const handleClose = () => {\n    setShow(false);\n  };\n\n  const handleShow = () => {\n    setShow(true);\n  };\n\n  const handleCheckingTrue = async () => {\n    let finishedArticlesString = localStorage.getItem(\"finishedArticles\");\n    let finishedArticlesList;\n    let localfinishedArticles;\n\n    if (finishedArticlesString === '') {\n      console.log(999);\n      localfinishedArticles = `${article.id}`;\n      finishedArticlesList = [article.id];\n    } else {\n      finishedArticlesList = finishedArticlesString.split(',');\n      finishedArticlesList.indexOf(article.id) === -1 ? finishedArticlesList.push(article.id) : console.log(\"This item already exists\");\n    } //set bookmarks to local state\n\n\n    setChecked(true);\n    let newfinishedArticlesString = finishedArticlesList.join(); //set bookmarks to localStorage\n\n    localStorage.setItem(\"finishedArticles\", newfinishedArticlesString); //set bookmarks to global state\n\n    disPatch(setFinishedArticles(finishedArticlesList)); //update server\n\n    if (provider === 'normal') {\n      try {\n        const res = await axios.put(`api/profile/?finishedArticles=${newfinishedArticlesString}&reader_id=${userId}`);\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      try {\n        const res = await axios.put(`api/profilesocial/?finishedArticles=${newfinishedArticlesString}&email=${email}&provider=${provider}`);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const handleCheckingFalse = async () => {\n    let finishedArticlesString = localStorage.getItem(\"finishedArticles\");\n\n    if (isChecked) {\n      if (finishedArticlesString !== null) {\n        let finishedArticlesList = finishedArticlesString.split(',');\n        finishedArticlesList = finishedArticlesList.filter(finishedArticle => Number(finishedArticle) !== article.id);\n        let newfinishedArticlesString = finishedArticlesList.join(); //set bookmarks to localStorage\n\n        localStorage.setItem(\"finishedArticles\", newfinishedArticlesString); //set bookmarks to global state\n\n        disPatch(setFinishedArticles(finishedArticlesList)); //update server\n\n        if (provider === 'normal') {\n          try {\n            const res = await axios.put(`api/profile/?finishedArticles=${newfinishedArticlesString}&reader_id=${userId}`);\n          } catch (error) {\n            console.log(error);\n          }\n        } else {\n          try {\n            const res = await axios.put(`api/profilesocial/?finishedArticles=${newfinishedArticlesString}&email=${email}&provider=${provider}`);\n          } catch (error) {\n            console.log(error);\n          }\n        }\n      } //set bookmarks to local state\n\n\n      setChecked(false);\n    }\n  };\n\n  const setBookmarksState = async bookmarksList => {\n    let newbookmarksString = bookmarksList.join(); //set bookmarks to localStorage\n\n    localStorage.setItem(\"bookmarks\", newbookmarksString); //set bookmarks to global state\n\n    disPatch(setBookmarks(bookmarksList)); //update server\n\n    if (provider === 'normal') {\n      try {\n        const res = await axios.put(`api/profile/?bookmarks=${newbookmarksString}&reader_id=${userId}`);\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      try {\n        const res = await axios.put(`api/profilesocial/?bookmarks=${newbookmarksString}&email=${email}&provider=${provider}`);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const onBookmarkClick = async () => {\n    let bookmarksString = localStorage.getItem(\"bookmarks\");\n    let localBookmarks;\n    let bookmarksList;\n\n    if (isBookmarked) {\n      if (bookmarksString !== null) {\n        bookmarksList = bookmarksString.split(',');\n        bookmarksList = bookmarksList.filter(bookmark => Number(bookmark) !== article.id);\n      } //set bookmarks to local state\n\n\n      setBookmark(false);\n      await setBookmarksState(bookmarksList);\n    } else {\n      console.log(bookmarksString);\n\n      if (bookmarksString === '') {\n        console.log(999);\n        localBookmarks = `${article.id}`;\n        bookmarksList = [article.id];\n      } else {\n        bookmarksList = bookmarksString.split(',');\n        bookmarksList.indexOf(article.id) === -1 ? bookmarksList.push(article.id) : console.log(\"This item already exists\");\n      } //set bookmarks to local state\n\n\n      setBookmark(true);\n      await setBookmarksState(bookmarksList); //redirect\n\n      if (router.pathname !== 'bookmarks') {\n        Router.push(`/bookmarks`);\n      }\n    }\n  };\n\n  useEffect(() => {}, []);\n  return __jsx(\"div\", {\n    className: \"articles-row\"\n  }, __jsx(Card, {\n    className: \"article-card\",\n    border: \"light\"\n  }, isLogin && router.pathname !== '/bookmarks' && __jsx(\"div\", {\n    className: \"article-bookmark\"\n  }, __jsx(\"span\", {\n    className: \"btn-o\"\n  }, __jsx(\"a\", {\n    href: \"#\",\n    onClick: () => {\n      onBookmarkClick();\n      return false;\n    }\n  }, isBookmarked ? __jsx(\"img\", {\n    src: \"https://raw.githubusercontent.com/JenHsuan/ALayman/master/views/images/bookmark-yellow.png\",\n    alt: \"Add this article to the bookmark\",\n    title: \"Add this article to the bookmark\"\n  }) : __jsx(\"img\", {\n    src: \"https://raw.githubusercontent.com/JenHsuan/ALayman/master/views/images/bookmark-white.png\",\n    alt: \"Add this article to the bookmark\",\n    title: \"Add this article to the bookmark\"\n  })))), router.pathname === '/bookmarks' && __jsx(\"div\", {\n    className: \"article-checked\"\n  }, __jsx(\"span\", {\n    className: \"btn-o\"\n  }, __jsx(\"a\", {\n    href: \"#\",\n    onClick: () => {\n      handleCheckingFalse();\n      return false;\n    }\n  }, isChecked ? __jsx(\"img\", {\n    src: \"https://raw.githubusercontent.com/JenHsuan/ALayman/master/views/images/check.png\",\n    alt: \"Marked as unfinished\",\n    title: \"Marked as unfinished\"\n  }) : __jsx(\"img\", {\n    src: \"https://raw.githubusercontent.com/JenHsuan/ALayman/master/views/images/uncheck.png\",\n    alt: \"Marked as finished\",\n    title: \"Marked as finished\"\n  })))), __jsx(Card.Body, {\n    className: \"article-card-body\"\n  }, __jsx(\"img\", {\n    className: \"article-card-img\",\n    src: `${article.image}`,\n    alt: article.title,\n    title: article.title\n  }), __jsx(\"div\", {\n    className: \"title\"\n  }, article.title), __jsx(\"div\", {\n    className: \"date\"\n  }, article.name), __jsx(\"div\", {\n    className: \"date\"\n  }, __jsx(\"span\", {\n    className: \"date\"\n  }, article.time), __jsx(\"span\", null, \" . \"), __jsx(\"span\", {\n    className: \"readtime\"\n  }, article.readtime)), __jsx(\"button\", {\n    className: \"article-btn\",\n    onClick: handleShow\n  }, \"Details\"))), __jsx(ArticleModal, {\n    show: show,\n    handleClose: handleClose,\n    article: article,\n    handleOpen: handleCheckingTrue\n  }));\n};\n\nexport default Article;","map":null,"metadata":{},"sourceType":"module"}