{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fetch from \"isomorphic-fetch\"; //Types\n\nimport { GET_ARTICLES } from '../types'; //Actions\n\nexport var getArticles = function getArticles() {\n  // Invoke API\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res2, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/api/articles');\n\n            case 2:\n              res2 = _context.sent;\n              _context.next = 5;\n              return res2.json();\n\n            case 5:\n              data = _context.sent;\n              //const res = await axios.get('/api/articles');\n              console.log(res2);\n              return _context.abrupt(\"return\", dispatch({\n                type: 'GET_ARTICLES',\n                payload: data\n              }));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n/*\nexport const getArticles = (): GetArticlesAction => {\n    return dispatch => {\n\n    }\n    try {\n\n        const res = await axios.get('/api/articles');\n        return {\n            type: GET_ARTICLES, \n            payload: res.data}\n    }\n    catch (err) {}\n}\n*/\n//Selector functions\n\nexport var selectArticlesState = function selectArticlesState(rootState) {\n  return rootState.articlesReducer;\n}; //Initial state\n\nvar initialState = {\n  articles: []\n}; //Reducer\n\nvar articlesReducer = function articlesReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_ARTICLES:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        products: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default articlesReducer;","map":{"version":3,"sources":["/Users/seanhsieh/github/100daysOfCodeIdeas/ideas/src/components/reducers/articlesReducer.ts"],"names":["fetch","GET_ARTICLES","getArticles","dispatch","res2","json","data","console","log","type","payload","selectArticlesState","rootState","articlesReducer","initialState","articles","state","action","products"],"mappings":";;;;;;;;AAKA,OAAOA,KAAP,MAAkB,kBAAlB,C,CACA;;AACA,SAASC,YAAT,QAA0C,UAA1C,C,CAEA;;AAWA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAuE;AAC9F;AACA;AAAA,wEAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACgBH,KAAK,CAAC,eAAD,CADrB;;AAAA;AACGI,cAAAA,IADH;AAAA;AAAA,qBAEgBA,IAAI,CAACC,IAAL,EAFhB;;AAAA;AAEGC,cAAAA,IAFH;AAIH;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AALG,+CAMID,QAAQ,CAAC;AACZM,gBAAAA,IAAI,EAAE,cADM;AAEZC,gBAAAA,OAAO,EAAEJ;AAFG,eAAD,CANZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAWH,CAbM;AAeP;;;;;;;;;;;;;;;AAgBA;;AACA,OAAO,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,SAAD;AAAA,SAA0BA,SAAS,CAACC,eAApC;AAAA,CAA5B,C,CAEP;;AACA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE;AADO,CAArB,C,CAIA;;AAKA,IAAMF,eAAe,GAAG,SAAlBA,eAAkB,GAAoE;AAAA,MAAnEG,KAAmE,uEAA5CF,YAA4C;AAAA,MAA9BG,MAA8B;;AACxF,UAAOA,MAAM,CAACR,IAAd;AACI,SAAKR,YAAL;AACI,6CACOe,KADP;AAEIE,QAAAA,QAAQ,EAAED,MAAM,CAACP;AAFrB;;AAIJ;AACI,aAAOM,KAAP;AAPR;AASH,CAVD;;AAYA,eAAeH,eAAf","sourcesContent":["import { Action } from 'redux';\nimport { RootState} from '../store/store'\nimport axios from 'axios';\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk'\nimport { AnyAction } from 'redux';\nimport fetch from \"isomorphic-fetch\";\n//Types\nimport { GET_ARTICLES, ArticleType } from '../types'\n\n//Actions\n\ninterface GetArticlesAction {\n    readonly type: typeof GET_ARTICLES\n    readonly payload: Array<object>\n}\n\nexport interface FetchTasksAction extends Action<'GET_ARTICLES'> {\n    payload: ArticleType[];\n}\n\nexport const getArticles = ():ThunkAction<Promise<FetchTasksAction>, {}, {}, FetchTasksAction> => {\n    // Invoke API\n    return async (dispatch: ThunkDispatch<{}, {}, FetchTasksAction>): Promise<FetchTasksAction>=> {\n        const res2 = await fetch('/api/articles');\n        const data = await res2.json();\n\n        //const res = await axios.get('/api/articles');\n        console.log(res2)\n        return dispatch({\n            type: 'GET_ARTICLES', \n            payload: data})\n        \n    }\n}\n\n/*\nexport const getArticles = (): GetArticlesAction => {\n    return dispatch => {\n\n    }\n    try {\n\n        const res = await axios.get('/api/articles');\n        return {\n            type: GET_ARTICLES, \n            payload: res.data}\n    }\n    catch (err) {}\n}\n*/\n\n//Selector functions\nexport const selectArticlesState = (rootState: RootState) => rootState.articlesReducer;\n\n//Initial state\nconst initialState = {\n    articles: [],\n}\n\n//Reducer\ninterface ArticlesState {\n    articles: Array<object>;\n}\n\nconst articlesReducer = (state: ArticlesState = initialState, action: GetArticlesAction) => {\n    switch(action.type) {\n        case GET_ARTICLES:\n            return {\n                ...state,\n                products: action.payload\n            }\n        default:\n            return state; \n    }\n};\n\nexport default articlesReducer;"]},"metadata":{},"sourceType":"module"}