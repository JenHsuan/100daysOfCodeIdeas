{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, Fragment, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectArticlesState, selectPartialArticlesState, selectFilteredArticlesState, selectIsLoadingState } from './reducers/articlesReducer';\nimport { getArticles, setPartialArticles } from './actions/articlesAction';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { Spinner } from 'react-bootstrap';\nimport Article from './Article';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Footer from '../components/Footer';\n\nconst ArticleList = () => {\n  const {\n    0: perPage,\n    1: setPerPage\n  } = useState(10);\n  const disPatch = useDispatch();\n  const articles = useSelector(selectArticlesState);\n  const filteredArticles = useSelector(selectFilteredArticlesState);\n  const partialArticles = useSelector(selectPartialArticlesState);\n  const isLoading = useSelector(selectIsLoadingState);\n  useEffect(() => {\n    disPatch(getArticles());\n  }, []);\n  useEffect(() => {//console.log(articles)\n  }, [articles]);\n  useEffect(() => {\n    console.log(filteredArticles);\n  }, [filteredArticles]);\n\n  const setPartialData = offset => {\n    const partialData = filteredArticles.length === 0 ? articles.slice(offset, offset + perPage) : filteredArticles.slice(offset, offset + perPage);\n    disPatch(setPartialArticles(partialData));\n  };\n\n  const handlePageSlected = e => {\n    var offset = e.selected * perPage;\n    e.selected(offset);\n  };\n\n  return __jsx(\"div\", {\n    className: \"articles-hide-siderbar\"\n  }, __jsx(\"div\", {\n    className: \"articles-row row\"\n  }, isLoading === true ? __jsx(\"div\", {\n    className: \"articles-spinner\"\n  }, __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\"\n  }, __jsx(\"span\", {\n    className: \"sr-only\"\n  }, \"Loading...\"))) : __jsx(Fragment, null, filteredArticles.length !== 0 ? filteredArticles.map(filteredArticle => __jsx(TransitionGroup, null, __jsx(CSSTransition, {\n    key: filteredArticle.id,\n    timeout: 500,\n    classNames: \"item\"\n  }, __jsx(Article, {\n    article: filteredArticle\n  })))) : articles.map(article => __jsx(TransitionGroup, null, __jsx(CSSTransition, {\n    key: article.id,\n    timeout: 500,\n    classNames: \"item\"\n  }, __jsx(Article, {\n    article: article\n  })))))), isLoading === false && __jsx(Footer, null));\n};\n\nArticleList.getInitialProps = async () => {\n  let news;\n\n  try {\n    const disPatch = useDispatch();\n  } catch (err) {\n    news = [];\n  }\n\n  return {\n    news\n  };\n};\n\nexport default ArticleList;","map":null,"metadata":{},"sourceType":"module"}