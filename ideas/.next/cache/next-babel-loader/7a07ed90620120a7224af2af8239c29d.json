{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//Types\nimport { GET_ARTICLES, GET_FILTERED_ARTICLES, SET_PARTIAL_ARTICLES, CLEAR_FILTER, SET_CATEGORY, CLEAR_CATEGORY, RESET_LOADING, SET_PLANNER, SET_PAPE_COUNT, SET_PERPAGE, SET_OFFSET, SET_LOADING } from '../types'; //Initial state\n\nconst initialState = {\n  articles: [],\n  filteredArticles: [],\n  partialArticles: [],\n  isLoading: false,\n  showPlanner: false,\n  perpage: 18,\n  pageCount: 1,\n  offset: 0\n}; //Selector functions\n\nexport const selectArticlesState = rootState => rootState.articlesReducer.articles;\nexport const selectFilteredArticlesState = rootState => rootState.articlesReducer.filteredArticles;\nexport const selectPartialArticlesState = rootState => rootState.articlesReducer.partialArticles;\nexport const selectIsLoadingState = rootState => rootState.articlesReducer.isLoading;\nexport const selectShowPlannerState = rootState => rootState.articlesReducer.showPlanner;\nexport const selectPerpageState = rootState => rootState.articlesReducer.perpage;\nexport const selectPageCountState = rootState => rootState.articlesReducer.pageCount;\nexport const selectOffsetState = rootState => rootState.articlesReducer.offset;\nexport const selectLoadingState = rootState => rootState.articlesReducer.isLoading; //Reducer\n\nconst articlesReducer = (state = initialState, action) => {\n  console.log(action.type);\n\n  switch (action.type) {\n    case GET_ARTICLES:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: false,\n        articles: action.payload,\n        offset: 0,\n        partialArticles: action.payload.slice(0, state.perpage)\n      });\n\n    case GET_FILTERED_ARTICLES:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: false,\n        filteredArticles: state.articles.filter(article => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return article.title.match(regex) || article.subtitle.match(regex);\n        }),\n        offset: 0,\n        partialArticles: state.filteredArticles.slice(0, state.perpage)\n      });\n\n    case SET_PARTIAL_ARTICLES:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: false,\n        partialArticles: action.payload\n      });\n\n    case CLEAR_FILTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filteredArticles: []\n      });\n\n    case SET_CATEGORY:\n      console.log(action.payload);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: false,\n        filteredArticles: state.articles.filter(article => {\n          return article.category == action.payload;\n        })\n      });\n\n    case CLEAR_CATEGORY:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filteredArticles: []\n      });\n\n    case RESET_LOADING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: false\n      });\n\n    case SET_PLANNER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showPlanner: action.payload\n      });\n\n    case SET_LOADING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: action.payload\n      });\n\n    case SET_OFFSET:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        offset: action.payload\n      });\n\n    case SET_PAPE_COUNT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        pageCount: action.payload\n      });\n\n    case SET_PERPAGE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        perpage: action.payload\n      });\n\n    default:\n      console.log(123);\n      return state;\n  }\n};\n\nexport default articlesReducer;","map":null,"metadata":{},"sourceType":"module"}