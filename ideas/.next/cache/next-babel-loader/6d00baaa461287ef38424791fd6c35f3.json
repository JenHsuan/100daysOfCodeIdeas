{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios'; //Types\n\nimport { GET_ARTICLES, GET_FILTERED_ARTICLES, SET_PARTIAL_ARTICLES, CLEAR_FILTER, SET_CATEGORY, CLEAR_CATEGORY, RESET_LOADING, SET_PLANNER, SET_PAPE_COUNT, SET_OFFSET, SET_LOADING } from '../types'; //Actions\n\nexport var getArticles = function getArticles() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios.get('/api/articles');\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return dispatch({\n                type: GET_ARTICLES,\n                payload: res.data\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var getFilteredArticles = function getFilteredArticles(text) {\n  return function (dispatch) {\n    dispatch({\n      type: GET_FILTERED_ARTICLES,\n      payload: text\n    });\n  };\n};\nexport var setPartialArticles = function setPartialArticles(articles) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_PARTIAL_ARTICLES,\n      payload: articles\n    });\n  };\n};\nexport var setLoading = function setLoading(isLoading) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_LOADING,\n      payload: isLoading\n    });\n  };\n};\nexport var setOffset = function setOffset(offset) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_OFFSET,\n      payload: offset\n    });\n  };\n};\nexport var setPageCount = function setPageCount(pageCount) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_PAPE_COUNT,\n      payload: pageCount\n    });\n  };\n};\nexport var clearFilter = function clearFilter() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n};\nexport var setCategory = function setCategory(category) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_CATEGORY,\n      payload: category\n    });\n  };\n};\nexport var clearCategory = function clearCategory() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_CATEGORY\n    });\n  };\n};\nexport var resetLoading = function resetLoading() {\n  return function (dispatch) {\n    dispatch({\n      type: RESET_LOADING\n    });\n  };\n};\nexport var setPlanner = function setPlanner(showPlanner) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_PLANNER,\n      payload: showPlanner\n    });\n  };\n};","map":{"version":3,"sources":["/Users/seanhsieh/github/100daysOfCodeIdeas/ideas/src/components/actions/articlesAction.ts"],"names":["axios","GET_ARTICLES","GET_FILTERED_ARTICLES","SET_PARTIAL_ARTICLES","CLEAR_FILTER","SET_CATEGORY","CLEAR_CATEGORY","RESET_LOADING","SET_PLANNER","SET_PAPE_COUNT","SET_OFFSET","SET_LOADING","getArticles","dispatch","get","res","type","payload","data","getFilteredArticles","text","setPartialArticles","articles","setLoading","isLoading","setOffset","offset","setPageCount","pageCount","clearFilter","setCategory","category","clearCategory","resetLoading","setPlanner","showPlanner"],"mappings":"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","sourcesContent":["import axios from 'axios';\n//Types\nimport { \n    GET_ARTICLES,\n    GET_FILTERED_ARTICLES,\n    SET_PARTIAL_ARTICLES,\n    CLEAR_FILTER,\n    SET_CATEGORY,\n    CLEAR_CATEGORY,\n    RESET_LOADING,\n    SET_PLANNER,\n    SET_PERPAGE,\n    SET_PAPE_COUNT,\n    SET_OFFSET,\n    SET_LOADING,\n    ArticleType \n} from '../types'\n\n//Actions\nexport interface GetArticlesAction {\n    readonly type: typeof GET_ARTICLES\n    readonly payload: Array<ArticleType>\n}\n\nexport interface GetFilteredArticlesAction {\n    readonly type: typeof GET_FILTERED_ARTICLES\n    readonly payload: string\n}\n\nexport interface SetPartialArticlesAction {\n    readonly type: typeof SET_PARTIAL_ARTICLES\n    readonly payload: string\n}\n\nexport interface SetPerpageAction {\n    readonly type: typeof SET_PERPAGE\n    readonly payload: number\n}\n\nexport interface SetPageCountAction {\n    readonly type: typeof SET_PAPE_COUNT\n    readonly payload: number\n}\n\nexport interface SetOffsetAction {\n    readonly type: typeof SET_OFFSET\n    readonly payload: number\n}\n\nexport interface SetLoadingAction {\n    readonly type: typeof SET_LOADING\n    readonly payload: boolean\n}\n\nexport interface ClearFilterAction {\n    readonly type: typeof CLEAR_FILTER\n}\n\nexport interface SetCategoryAction {\n    readonly type: typeof SET_CATEGORY\n    readonly payload: string\n}\n\nexport interface ClearCategoryAction {\n    readonly type: typeof CLEAR_CATEGORY\n}\n\nexport interface ResetLoadingAction {\n    readonly type: typeof RESET_LOADING\n}\n\nexport interface SetPlannerAction {\n    readonly type: typeof SET_PLANNER\n    readonly payload: boolean\n}\n\nexport const getArticles = () => async dispatch => {\n        const res = await axios.get('/api/articles');\n        await dispatch({\n            type: GET_ARTICLES, \n            payload: res.data})\n}\n\nexport const getFilteredArticles = text => dispatch => {\n    dispatch({\n        type: GET_FILTERED_ARTICLES, \n        payload: text})\n}\n\nexport const setPartialArticles = articles => dispatch => {\n    dispatch({\n        type: SET_PARTIAL_ARTICLES, \n        payload: articles})\n}\n\nexport const setLoading = isLoading => dispatch => {\n    dispatch({\n        type: SET_LOADING, \n        payload: isLoading})\n}\n\nexport const setOffset = offset => dispatch => {\n    dispatch({\n        type: SET_OFFSET, \n        payload: offset})\n}\n\nexport const setPageCount = pageCount => dispatch => {\n    dispatch({\n        type: SET_PAPE_COUNT, \n        payload: pageCount})\n}\n\nexport const clearFilter = () => dispatch => {\n    dispatch({type: CLEAR_FILTER})\n}\n\nexport const setCategory = category => dispatch => {\n    dispatch({\n        type: SET_CATEGORY, \n        payload: category})\n}\n\nexport const clearCategory = () => dispatch => {\n    dispatch({type: CLEAR_CATEGORY})\n}\n\nexport const resetLoading = () => dispatch => {\n    dispatch({type: RESET_LOADING})\n}\n\nexport const setPlanner = showPlanner => dispatch => {\n    dispatch({\n        type: SET_PLANNER, \n        payload: showPlanner})\n}\n\n\n"]},"metadata":{},"sourceType":"module"}