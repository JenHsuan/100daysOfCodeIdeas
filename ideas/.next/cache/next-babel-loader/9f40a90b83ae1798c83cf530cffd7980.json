{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\n//Types\nimport { GET_ARTICLES, GET_FITERED_ARTICLES } from '../types'; //Actions\n\nexport const getArticles = () => async dispatch => {\n  const res = await axios.get('/api/articles?category=1');\n  console.log(res.data);\n  await dispatch({\n    type: GET_ARTICLES,\n    payload: res.data\n  });\n};\nexport const getFilteredArticles = text => async dispatch => {\n  await dispatch({\n    type: GET_FITERED_ARTICLES,\n    payload: text\n  });\n}; //Selector functions\n\nexport const selectArticlesState = rootState => rootState.articlesReducer.articles; //Initial state\n\nconst initialState = {\n  articles: [],\n  filter: \"\"\n}; //Reducer\n\nconst articlesReducer = (state = initialState, action) => {\n  console.log(action.type);\n\n  switch (action.type) {\n    case GET_ARTICLES:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        articles: action.payload\n      });\n\n    default:\n      console.log(123);\n      return state;\n  }\n};\n\nexport default articlesReducer;","map":{"version":3,"sources":["/Users/seanhsieh/github/100daysOfCodeIdeas/ideas/src/components/reducers/articlesReducer.ts"],"names":["axios","GET_ARTICLES","GET_FITERED_ARTICLES","getArticles","dispatch","res","get","console","log","data","type","payload","getFilteredArticles","text","selectArticlesState","rootState","articlesReducer","articles","initialState","filter","state","action"],"mappings":";;;;;;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AAIA;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAgE,UAAhE,C,CAEA;;AAWA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC3C,QAAMC,GAAG,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,0BAAV,CAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,IAAhB;AACA,QAAML,QAAQ,CAAC;AACXM,IAAAA,IAAI,EAAET,YADK;AAEXU,IAAAA,OAAO,EAAEN,GAAG,CAACI;AAFF,GAAD,CAAd;AAGP,CANM;AAQP,OAAO,MAAMG,mBAAmB,GAAGC,IAAI,IAAI,MAAMT,QAAN,IAAkB;AACzD,QAAMA,QAAQ,CAAC;AACXM,IAAAA,IAAI,EAAER,oBADK;AAEXS,IAAAA,OAAO,EAAEE;AAFE,GAAD,CAAd;AAGH,CAJM,C,CAQP;;AACA,OAAO,MAAMC,mBAAmB,GAAIC,SAAD,IAA0BA,SAAS,CAACC,eAAV,CAA0BC,QAAhF,C,CAEP;;AACA,MAAMC,YAAY,GAAG;AACjBD,EAAAA,QAAQ,EAAE,EADO;AAEjBE,EAAAA,MAAM,EAAE;AAFS,CAArB,C,CAKA;;AAKA,MAAMH,eAAe,GAAG,CAACI,KAAoB,GAAGF,YAAxB,EAAsCG,MAAtC,KAAoE;AACxFd,EAAAA,OAAO,CAACC,GAAR,CAAYa,MAAM,CAACX,IAAnB;;AACA,UAAOW,MAAM,CAACX,IAAd;AACI,SAAKT,YAAL;AACI,6CACOmB,KADP;AAEIH,QAAAA,QAAQ,EAAEI,MAAM,CAACV;AAFrB;;AAIJ;AACIJ,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,aAAOY,KAAP;AARR;AAUH,CAZD;;AAcA,eAAeJ,eAAf","sourcesContent":["import { Action } from 'redux';\nimport { RootState} from '../store/store'\nimport axios from 'axios';\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk'\nimport { AnyAction } from 'redux';\nimport fetch from \"isomorphic-fetch\";\n//Types\nimport { GET_ARTICLES, GET_FITERED_ARTICLES, ArticleType } from '../types'\n\n//Actions\n\nexport interface GetArticlesAction {\n    readonly type: typeof GET_ARTICLES\n    readonly payload: Array<object>\n}\n\nexport interface FetchTasksAction extends Action<'GET_ARTICLES'> {\n    payload: ArticleType[];\n}\n\nexport const getArticles = () => async dispatch => {\n        const res = await axios.get('/api/articles?category=1');\n        console.log(res.data)\n        await dispatch({\n            type: GET_ARTICLES, \n            payload: res.data})\n}\n\nexport const getFilteredArticles = text => async dispatch => {\n    await dispatch({\n        type: GET_FITERED_ARTICLES, \n        payload: text})\n}\n\n\n\n//Selector functions\nexport const selectArticlesState = (rootState: RootState) => rootState.articlesReducer.articles;\n\n//Initial state\nconst initialState = {\n    articles: [],\n    filter: \"\"\n}\n\n//Reducer\ninterface ArticlesState {\n    articles: Array<object>;\n}\n\nconst articlesReducer = (state: ArticlesState = initialState, action: GetArticlesAction) => {\n    console.log(action.type)\n    switch(action.type) {\n        case GET_ARTICLES:\n            return {\n                ...state,\n                articles: action.payload\n            }\n        default:\n            console.log(123)\n            return state; \n    }\n};\n\nexport default articlesReducer;"]},"metadata":{},"sourceType":"module"}