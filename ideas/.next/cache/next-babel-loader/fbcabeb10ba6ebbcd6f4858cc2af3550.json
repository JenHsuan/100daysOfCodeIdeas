{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectArticlesState, selectFilteredArticlesState, selectIsLoadingState } from './reducers/articlesReducer';\nimport { getArticles } from './actions/articlesAction';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { Spinner } from 'react-bootstrap';\nimport Article from './Article';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst ArticleList = () => {\n  const disPatch = useDispatch();\n  const articles = useSelector(selectArticlesState);\n  const filteredArticles = useSelector(selectFilteredArticlesState);\n  const isLoading = useSelector(selectIsLoadingState);\n  useEffect(() => {\n    disPatch(getArticles());\n  }, []);\n  useEffect(() => {//console.log(articles)\n  }, [articles]);\n  useEffect(() => {\n    console.log(filteredArticles);\n  }, [filteredArticles]);\n  return __jsx(\"div\", {\n    className: \"articles-hide-siderbar\"\n  }, __jsx(\"div\", {\n    className: \"container articles\",\n    id: \"menu-container\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, isLoading === true ? __jsx(\"div\", {\n    className: \"articles-spinner\"\n  }, __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\"\n  }, __jsx(\"span\", {\n    className: \"sr-only\"\n  }, \"Loading...\"))) : __jsx(Fragment, null, filteredArticles.length !== 0 ? filteredArticles.map(filteredArticle => __jsx(TransitionGroup, null, __jsx(CSSTransition, {\n    key: filteredArticle.id,\n    timeout: 500,\n    classNames: \"item\"\n  }, __jsx(Article, {\n    article: filteredArticle\n  })))) : articles.map(article => __jsx(TransitionGroup, null, __jsx(CSSTransition, {\n    key: article.id,\n    timeout: 500,\n    classNames: \"item\"\n  }, __jsx(Article, {\n    article: article\n  }))))))));\n};\n\nArticleList.getInitialProps = async () => {\n  let news;\n\n  try {\n    const disPatch = useDispatch();\n  } catch (err) {\n    news = [];\n  }\n\n  return {\n    news\n  };\n};\n\nexport default ArticleList;","map":{"version":3,"sources":["/Users/seanhsieh/github/100daysOfCodeIdeas/ideas/src/components/ArticleList.tsx"],"names":["React","useEffect","Fragment","useDispatch","useSelector","selectArticlesState","selectFilteredArticlesState","selectIsLoadingState","getArticles","CSSTransition","TransitionGroup","Spinner","Article","ArticleList","disPatch","articles","filteredArticles","isLoading","console","log","length","map","filteredArticle","id","article","getInitialProps","news","err"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACIC,mBADJ,EAEIC,2BAFJ,EAGIC,oBAHJ,QAIO,4BAJP;AAMA,SACIC,WADJ,QAEO,0BAFP;AAIA,SACIC,aADJ,EAEIC,eAFJ,QAGO,wBAHP;AAKA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,sCAAP;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACtB,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,QAAQ,GAAGX,WAAW,CAACC,mBAAD,CAA5B;AACA,QAAMW,gBAAgB,GAAGZ,WAAW,CAACE,2BAAD,CAApC;AACA,QAAMW,SAAS,GAAGb,WAAW,CAACG,oBAAD,CAA7B;AAEAN,EAAAA,SAAS,CAAC,MAAK;AACXa,IAAAA,QAAQ,CAACN,WAAW,EAAZ,CAAR;AACH,GAFQ,EAEN,EAFM,CAAT;AAIAP,EAAAA,SAAS,CAAC,MAAK,CACX;AACH,GAFQ,EAEN,CAACc,QAAD,CAFM,CAAT;AAIAd,EAAAA,SAAS,CAAC,MAAK;AACXiB,IAAAA,OAAO,CAACC,GAAR,CAAYH,gBAAZ;AACH,GAFQ,EAEN,CAACA,gBAAD,CAFM,CAAT;AAIA,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACA;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAoC,IAAA,EAAE,EAAC;AAAvC,KACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACKC,SAAS,KAAK,IAAd,GAAsB;AAAK,IAAA,SAAS,EAAC;AAAf,KACnB,MAAC,OAAD;AAAS,IAAA,SAAS,EAAC,QAAnB;AAA4B,IAAA,IAAI,EAAC;AAAjC,KACI;AAAM,IAAA,SAAS,EAAC;AAAhB,kBADJ,CADmB,CAAtB,GAKD,MAAC,QAAD,QACID,gBAAgB,CAACI,MAAjB,KAA4B,CAA5B,GAAgCJ,gBAAgB,CAACK,GAAjB,CAAqBC,eAAe,IAC/D,MAAC,eAAD,QACG,MAAC,aAAD;AAAe,IAAA,GAAG,EAAEA,eAAe,CAACC,EAApC;AAAwC,IAAA,OAAO,EAAE,GAAjD;AAAsD,IAAA,UAAU,EAAC;AAAjE,KACI,MAAC,OAAD;AAAU,IAAA,OAAO,EAAID;AAArB,IADJ,CADH,CAD2B,CAAhC,GAMGP,QAAQ,CAACM,GAAT,CAAaG,OAAO,IAClB,MAAC,eAAD,QACG,MAAC,aAAD;AAAe,IAAA,GAAG,EAAEA,OAAO,CAACD,EAA5B;AAAgC,IAAA,OAAO,EAAE,GAAzC;AAA8C,IAAA,UAAU,EAAC;AAAzD,KACI,MAAC,OAAD;AAAS,IAAA,OAAO,EAAIC;AAApB,IADJ,CADH,CADF,CAPP,CANJ,CADJ,CADA,CADJ;AA2BH,CA7CD;;AA+CAX,WAAW,CAACY,eAAZ,GAA8B,YAAY;AACtC,MAAIC,IAAJ;;AACA,MAAI;AACA,UAAMZ,QAAQ,GAAGX,WAAW,EAA5B;AACH,GAFD,CAEE,OAAOwB,GAAP,EAAY;AACZD,IAAAA,IAAI,GAAG,EAAP;AACD;;AAED,SAAO;AACHA,IAAAA;AADG,GAAP;AAGD,CAXH;;AAYA,eAAeb,WAAf","sourcesContent":["import React, {useEffect, Fragment} from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    selectArticlesState,\n    selectFilteredArticlesState,\n    selectIsLoadingState\n} from './reducers/articlesReducer';\n\nimport { \n    getArticles\n} from './actions/articlesAction';\n\nimport {\n    CSSTransition,\n    TransitionGroup,\n} from 'react-transition-group';\n\nimport {Spinner} from 'react-bootstrap';\nimport Article from './Article'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst ArticleList = () => {\n    const disPatch = useDispatch();\n    const articles = useSelector(selectArticlesState);\n    const filteredArticles = useSelector(selectFilteredArticlesState);\n    const isLoading = useSelector(selectIsLoadingState);\n    \n    useEffect(()=> {\n        disPatch(getArticles());\n    }, [])\n\n    useEffect(()=> {\n        //console.log(articles)\n    }, [articles])\n\n    useEffect(()=> {\n        console.log(filteredArticles)\n    }, [filteredArticles])\n\n    return (\n        <div className=\"articles-hide-siderbar\">\n        <div className=\"container articles\" id=\"menu-container\">\n            <div className=\"row\">\n                {isLoading === true ? (<div className='articles-spinner'>{\n                    <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </Spinner>\n                }</div>) : (\n                <Fragment>{\n                    filteredArticles.length !== 0 ? filteredArticles.map(filteredArticle=>\n                        (<TransitionGroup>\n                            <CSSTransition key={filteredArticle.id} timeout={500} classNames=\"item\">\n                                <Article  article = {filteredArticle}/>\n                            </CSSTransition>\n                        </TransitionGroup>)\n                    ): articles.map(article=>\n                        (<TransitionGroup>\n                            <CSSTransition key={article.id} timeout={500} classNames=\"item\">\n                                <Article article = {article}/>\n                            </CSSTransition>\n                        </TransitionGroup>))\n                }</Fragment>)}\n            </div>\n        </div>\n        </div>\n    )\n}\n\nArticleList.getInitialProps = async () => {\n    let news;\n    try {\n        const disPatch = useDispatch();    \n    } catch (err) {\n      news = [];\n    }\n  \n    return {\n        news\n    }\n  }\nexport default ArticleList;\n"]},"metadata":{},"sourceType":"module"}