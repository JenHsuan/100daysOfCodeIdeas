{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios'; //Types\n\nimport { GET_ARTICLES, GET_FILTERED_ARTICLES, CLEAR_FILTER } from '../types'; //Actions\n\n/*\nexport interface FetchTasksAction extends Action<'GET_ARTICLES'> {\n    payload: ArticleType[];\n}\n*/\nexport const getArticles = () => async dispatch => {\n  const res = await axios.get('/api/articles?category=1');\n  console.log(res.data);\n  await dispatch({\n    type: GET_ARTICLES,\n    payload: res.data\n  });\n};\nexport const getFilteredArticles = text => dispatch => {\n  dispatch({\n    type: GET_FILTERED_ARTICLES,\n    payload: text\n  });\n};\nexport const clearFilter = () => dispatch => {\n  dispatch({\n    type: CLEAR_FILTER\n  });\n}; //Selector functions\n\nexport const selectArticlesState = rootState => rootState.articlesReducer.articles;\nexport const selectFilteredArticlesState = rootState => rootState.articlesReducer.filteredArticles; //Initial state\n\nconst initialState = {\n  articles: [],\n  filteredArticles: []\n}; //Reducer\n\nconst articlesReducer = (state = initialState, action) => {\n  console.log(action.type);\n\n  switch (action.type) {\n    case GET_ARTICLES:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        articles: action.payload\n      });\n\n    case GET_FILTERED_ARTICLES:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filteredArticles: state.articles.filter(article => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return article.title.match(regex) || article.subtitle.match(regex);\n        })\n      });\n\n    case CLEAR_FILTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filtered: []\n      });\n\n    default:\n      console.log(123);\n      return state;\n  }\n};\n\nexport default articlesReducer;","map":{"version":3,"sources":["/Users/seanhsieh/github/100daysOfCodeIdeas/ideas/src/components/reducers/articlesReducer.ts"],"names":["axios","GET_ARTICLES","GET_FILTERED_ARTICLES","CLEAR_FILTER","getArticles","dispatch","res","get","console","log","data","type","payload","getFilteredArticles","text","clearFilter","selectArticlesState","rootState","articlesReducer","articles","selectFilteredArticlesState","filteredArticles","initialState","state","action","filter","article","regex","RegExp","title","match","subtitle","filtered"],"mappings":";;;;;;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,YAAT,EAAuBC,qBAAvB,EAA8CC,YAA9C,QAA+E,UAA/E,C,CAEA;;AAgBA;;;;;AAMA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC3C,QAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAU,0BAAV,CAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,IAAhB;AACA,QAAML,QAAQ,CAAC;AACXM,IAAAA,IAAI,EAAEV,YADK;AAEXW,IAAAA,OAAO,EAAEN,GAAG,CAACI;AAFF,GAAD,CAAd;AAGP,CANM;AAQP,OAAO,MAAMG,mBAAmB,GAAGC,IAAI,IAAIT,QAAQ,IAAI;AACnDA,EAAAA,QAAQ,CAAC;AACLM,IAAAA,IAAI,EAAET,qBADD;AAELU,IAAAA,OAAO,EAAEE;AAFJ,GAAD,CAAR;AAGH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,MAAMV,QAAQ,IAAI;AACzCA,EAAAA,QAAQ,CAAC;AAACM,IAAAA,IAAI,EAAER;AAAP,GAAD,CAAR;AACH,CAFM,C,CAIP;;AACA,OAAO,MAAMa,mBAAmB,GAAIC,SAAD,IAA0BA,SAAS,CAACC,eAAV,CAA0BC,QAAhF;AACP,OAAO,MAAMC,2BAA2B,GAAIH,SAAD,IAA0BA,SAAS,CAACC,eAAV,CAA0BG,gBAAxF,C,CAEP;;AACA,MAAMC,YAAY,GAAG;AACjBH,EAAAA,QAAQ,EAAE,EADO;AAEjBE,EAAAA,gBAAgB,EAAE;AAFD,CAArB,C,CAKA;;AAMA,MAAMH,eAAe,GAAG,CAACK,KAAoB,GAAGD,YAAxB,EAAsCE,MAAtC,KAAoH;AACxIhB,EAAAA,OAAO,CAACC,GAAR,CAAYe,MAAM,CAACb,IAAnB;;AACA,UAAOa,MAAM,CAACb,IAAd;AACI,SAAKV,YAAL;AACI,6CACOsB,KADP;AAEIJ,QAAAA,QAAQ,EAAEK,MAAM,CAACZ;AAFrB;;AAIJ,SAAKV,qBAAL;AACI,6CACOqB,KADP;AAEIF,QAAAA,gBAAgB,EAAEE,KAAK,CAACJ,QAAN,CAAeM,MAAf,CAAsBC,OAAO,IAAI;AAC/C,gBAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEJ,MAAM,CAACZ,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOc,OAAO,CAACG,KAAR,CAAcC,KAAd,CAAoBH,KAApB,KAA8BD,OAAO,CAACK,QAAR,CAAiBD,KAAjB,CAAuBH,KAAvB,CAArC;AACH,SAHiB;AAFtB;;AAOJ,SAAKxB,YAAL;AACI,6CACOoB,KADP;AAEIS,QAAAA,QAAQ,EAAE;AAFd;;AAIJ;AACIxB,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,aAAOc,KAAP;AArBR;AAuBH,CAzBD;;AA2BA,eAAeL,eAAf","sourcesContent":["import { Action } from 'redux';\nimport { RootState} from '../store/store'\nimport axios from 'axios';\n//Types\nimport { GET_ARTICLES, GET_FILTERED_ARTICLES, CLEAR_FILTER, ArticleType } from '../types'\n\n//Actions\n\nexport interface GetArticlesAction {\n    readonly type: typeof GET_ARTICLES\n    readonly payload: Array<ArticleType>\n}\n\nexport interface GetFilteredArticlesAction {\n    readonly type: typeof GET_FILTERED_ARTICLES\n    readonly payload: string\n}\n\nexport interface ClearFilterAction {\n    readonly type: typeof CLEAR_FILTER\n}\n\n/*\nexport interface FetchTasksAction extends Action<'GET_ARTICLES'> {\n    payload: ArticleType[];\n}\n*/\n\nexport const getArticles = () => async dispatch => {\n        const res = await axios.get('/api/articles?category=1');\n        console.log(res.data)\n        await dispatch({\n            type: GET_ARTICLES, \n            payload: res.data})\n}\n\nexport const getFilteredArticles = text => dispatch => {\n    dispatch({\n        type: GET_FILTERED_ARTICLES, \n        payload: text})\n}\n\nexport const clearFilter = () => dispatch => {\n    dispatch({type: CLEAR_FILTER})\n}\n\n//Selector functions\nexport const selectArticlesState = (rootState: RootState) => rootState.articlesReducer.articles;\nexport const selectFilteredArticlesState = (rootState: RootState) => rootState.articlesReducer.filteredArticles;\n\n//Initial state\nconst initialState = {\n    articles: [],\n    filteredArticles: []\n}\n\n//Reducer\ninterface ArticlesState {\n    articles: Array<ArticleType>;\n    filteredArticles: Array<ArticleType>;\n}\n\nconst articlesReducer = (state: ArticlesState = initialState, action: GetArticlesAction | GetFilteredArticlesAction | ClearFilterAction) => {\n    console.log(action.type)\n    switch(action.type) {\n        case GET_ARTICLES:\n            return {\n                ...state,\n                articles: action.payload\n            }\n        case GET_FILTERED_ARTICLES:\n            return {\n                ...state,\n                filteredArticles: state.articles.filter(article => {\n                    const regex = new RegExp(`${action.payload}`, 'gi');\n                    return article.title.match(regex) || article.subtitle.match(regex);\n                })\n            }\n        case CLEAR_FILTER:\n            return {\n                ...state,\n                filtered: []\n            }\n        default:\n            console.log(123)\n            return state; \n    }\n};\n\nexport default articlesReducer;"]},"metadata":{},"sourceType":"module"}